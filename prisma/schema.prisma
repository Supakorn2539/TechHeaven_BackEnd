// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  googleId      String?
  firstName     String          @map("first_name")
  lastName      String          @map("last_name")
  password      String?
  dateOfBirth   DateTime?       @map("date_of_birth")
  profileImage  String?         @map("profile_image")
  role          Role            @default(USER)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  UserPromotion UserPromotion[]
  ChatMembers   ChatMember[]
  Messages      Message[]
  Carts         Cart[]
  Order         Order[]
  Booking       Booking[]
  PCBuild       PCBuild[]
}

enum Role {
  ADMIN
  USER
}

model UserPromotion {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @map("user_id")
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  promotionId Int       @map("promotion_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  redeemedAt  DateTime  @map("redeemed_at")

  @@map("user_promotions")
}

model Promotion {
  id                Int             @id @default(autoincrement())
  title             String
  description       String
  imageUrl          String
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  promotionDiscount Float           @map("promotion_discount")
  discountType      DiscountType    @map("discount_type")
  startDate         DateTime        @map("start_date")
  expirationDate    DateTime        @map("expiration_date")
  promotionType     PromotionType   @map("promotion_type")
  promotionCode     String          @map("promotion_code")
  UserPromotion     UserPromotion[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PromotionType {
  NEW_USER
  RETURNING_USER
  BIRTHDAY
  OTHER
}

model ChatMember {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int      @map("chat_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
}

model Chat {
  id          Int          @id @default(autoincrement())
  name        String
  ChatMembers ChatMember[]
  Messages    Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  chat    Chat   @relation(fields: [chatId], references: [id])
  chatId  Int    @map("chat_id")
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @map("user_id")
  message String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  status    Status     @default(PENDING)
  total     Decimal    @db.Decimal(10, 2)
  CartItems CartItem[]
}

enum Status {
  PENDING
  SUCCESS
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int     @map("cart_id")
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  @@map("cart_item")
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  price           Float
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  ProductImages   ProductImage[]
  categoryId      Int
  ProductCategory ProductCategory @relation(fields: [categoryId], references: [id])
  CartItems       CartItem[]
  OrderItems      OrderItem[]
  CPU             CPU[]
  Motherboard     Motherboard[]
  GPU             GPU[]
  Memory          Memory[]
  PowerSupply     PowerSupply[]
  Case            Case[]
  Drive           Drive[]
  CPUCooler       CPUCooler[]
  Monitor         Monitor[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
  imageUrl  String

  @@map("product_image")
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  Products    Product[]

  @@map("product_category")
}

model Order {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @map("user_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod @map("payment_method")
  OrderItems    OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int     @map("order_id")
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
  quantity  Int

  @@map("order_item")
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  MOBILE_PAYMENT
  GIFT_CARD
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  RETURNED
  EXCHANGED
  COMPLETED
}

model Booking {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @map("user_id")
  queuePosition Int?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  bookingDate   DateTime      @map("booking_date")
  status        BookingStatus
  type          BookingType
  notes         String?
}

enum BookingType {
  CUSTOM_BUILD
  REPAIR
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  EXPIRED
  REJECTED
}

model PCBuild {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int          @map("user_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  description   String?
  cpu           CPU?         @relation(fields: [cpuId], references: [id])
  cpuId         Int?         @map("cpu_id")
  motherboard   Motherboard? @relation(fields: [motherboardId], references: [id])
  motherboardId Int?         @map("motherboard_id")
  gpu           GPU?         @relation(fields: [gpuId], references: [id])
  gpuId         Int?         @map("gpu_id")
  memory        Memory?      @relation(fields: [memoryId], references: [id])
  memoryId      Int?         @map("memory_id")
  powerSupply   PowerSupply? @relation(fields: [powerSupplyId], references: [id])
  powerSupplyId Int?         @map("power_supply_id")
  case          Case?        @relation(fields: [caseId], references: [id])
  caseId        Int?         @map("case_id")
  drive         Drive?       @relation(fields: [driveId], references: [id])
  driveId       Int?         @map("drive_id")
  cpuCooler     CPUCooler?   @relation(fields: [cpuCoolerId], references: [id])
  cpuCoolerId   Int?         @map("cpu_cooler_id")
  monitor       Monitor?     @relation(fields: [monitorId], references: [id])
  monitorId     Int?         @map("monitor_id")
  totalPrice    Float
}

// ==========PC Parts==========
model CPU {
  id          Int       @id @default(autoincrement())
  name        String
  model       String
  socket      String
  cores       Int
  threads     Int
  baseClock   Float
  boostClock  Float?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  description String
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int       @map("product_id")
  PCBuild     PCBuild[]

  @@map("cpu")
}

model Motherboard {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  socket    String
  chipset   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id])
  productId Int       @map("product_id")
  PCBuild   PCBuild[]
}

model GPU {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id])
  productId Int       @map("product_id")
  vram      Int
  power     Int
  PCBuild   PCBuild[]

  @@map("gpu")
}

model Memory {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id])
  productId Int       @map("product_id")
  memory    Int
  busSpeed  Int       @map("bus_speed")
  type      String
  PCBuild   PCBuild[]
}

model PowerSupply {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id])
  productId Int       @map("product_id")
  wattage   Int
  PCBuild   PCBuild[]

  @@map("power_supply")
}

model Case {
  id        Int       @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  product   Product   @relation(fields: [productId], references: [id])
  productId Int       @map("product_id")
  size      String
  PCBuild   PCBuild[]
}

model Drive {
  id        Int         @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  product   Product     @relation(fields: [productId], references: [id])
  productId Int         @map("product_id")
  size      String
  type      DriveType
  speed     String
  format    DriveFormat
  PCBuild   PCBuild[]
}

enum DriveType {
  HDD
  SSD
}

enum DriveFormat {
  SATA
  M_2
}

model CPUCooler {
  id        Int           @id @default(autoincrement())
  name      String
  model     String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  product   Product       @relation(fields: [productId], references: [id])
  productId Int           @map("product_id")
  socket    String
  radiator  Int
  type      CPUCoolerType
  PCBuild   PCBuild[]

  @@map("cpu_cooler")
}

enum CPUCoolerType {
  AIR
  LIQUID
}

model Monitor {
  id          Int       @id @default(autoincrement())
  name        String
  model       String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int       @map("product_id")
  size        Int
  resolution  String
  refreshRate Int       @map("refresh_rate")
  panelType   String    @map("panel_type")
  PCBuild     PCBuild[]
}
